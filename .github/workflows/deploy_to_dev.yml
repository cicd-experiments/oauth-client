name: Deploy oauth-client to the development stand
on:
  push:
    branches:
      - develop
permissions: {}
env:
  ENV_FILENAME: .env
  COMPOSE_FILENAME: compose.yml
  CONTAINER_NAME: ${{ github.event.repository.name }}
  IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
jobs:
  checkstyle:
    name: Checkstyle
    environment: develop
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Make maven wrapper executable
        run: chmod +x mvnw
      - name: Cache maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: "${{ runner.os }}-m2-checksytle-${{ hashFiles('**/pom.xml') }}"
      - name: Run Checkstyle
        run: ./mvnw checkstyle:check
  test:
    name: Test
    environment: develop
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Run Keycloak container
        run: |
          docker run -d \
          --name testkeycloak \
          -p 8090:8080 -p 9000:9000 \
          -e KC_HTTP_PORT=8080 \
          -e KC_BOOTSTRAP_ADMIN_USERNAME=admin \
          -e KC_BOOTSTRAP_ADMIN_PASSWORD=pass \
          -e KC_HEALTH_ENABLED=true \
          -v ./src/main/resources/keycloak:/opt/keycloak/data/import \
          keycloak/keycloak:26.1 \
          start-dev --import-realm
      - name: Wait for Keycloak to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:9000/health > /dev/null; then
              echo "Keycloak is ready!"
              break
            fi
            echo "Waiting for Keycloak to start..."
            sleep 5
          done
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Make maven wrapper executable
        run: chmod +x mvnw
      - name: Cache maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: "${{ runner.os }}-m2-test-${{ hashFiles('**/pom.xml') }}"
      - name: Run test
        run: |
          ./mvnw -B \
          -DISSUER_URI=http://localhost:8090/realms/testrealm \
          test --file pom.xml
  build_artifact:
    name: Build artifact
    environment: develop
    permissions:
      contents: read
      packages: write
    needs:
      - checkstyle
      - test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: "${{ runner.os }}-m2-build-${{ hashFiles('**/pom.xml') }}"
      - name: Make maven wrapper executable
        run: chmod +x mvnw
      - name: Build with maven
        run: ./mvnw -B package --file pom.xml -Dmaven.test.skip
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: target/*.jar
  build_and_push_image:
    name: Build and push image
    environment: develop
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    needs:
      - build_artifact
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: target
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}
  deploy_service:
    name: Deploy service
    environment: develop
    permissions:
      contents: read
    needs:
      - build_and_push_image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create .env file
        run: |
          echo "APP_PORT=${{ vars.OAUTH_CLIENT_PORT }}" > ${{ env.ENV_FILENAME }}
          echo "CONTAINER_NAME=${{ env.CONTAINER_NAME }}" >> ${{ env.ENV_FILENAME }}
          echo "IMAGE=${{ env.IMAGE }}" >> ${{ env.ENV_FILENAME }}
          echo "ISSUER_URI=http://iam-tool:8080/realms/cicd" >> ${{ env.ENV_FILENAME }}
          echo "REDIRECT_URI=https://dipdeepcode.ru" >> ${{ env.ENV_FILENAME }}
          echo "CLIENT_ID=cicd-client" >> ${{ env.ENV_FILENAME }}
      - name: Copy files via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "${{ env.ENV_FILENAME }},${{ env.COMPOSE_FILENAME }}"
          target: ${{ vars.PROJECT_DIR }}
      - name: Compose down and compose up
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ vars.PROJECT_DIR }}
            docker compose --env-file ${{ env.ENV_FILENAME }} down
            docker image rm ${{ env.IMAGE }} 2> /dev/null
            docker compose --env-file ${{ env.ENV_FILENAME }} up -d
  service_healthcheck:
    name: Service healthcheck
    environment: develop
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    needs:
      - deploy_service
    steps:
      - name: Run healthcheck script on server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: CONTAINER_NAME
          script: |
            for i in {1..10} ; do
              status=$( docker inspect --format='{{.State.Status}}' $CONTAINER_NAME )
              if [ "$status" = "running" ]; then
                health=$( docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME )
                if [ "$health" = "healthy" ]; then
                  echo "Service is healthy"
                  exit 0
                fi
              fi
              sleep 5
            done
            echo "Service is unhealthy"
            exit 1

